<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="/" />
    <link rel="stylesheet" href="@Assets["app.css"]" />
    <link rel="stylesheet" href="@Assets["LogAnalytics.Server.styles.css"]" />
    <link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" rel="stylesheet" />
    <link href="_content/MudBlazor/MudBlazor.min.css" rel="stylesheet" />
    
    @if (RuntimeEnvironment.IsElectron)
    {
        <!-- Electron-specific import map for Node.js compatibility -->
        <script type="importmap">
        {
            "imports": {
                "process": "data:text/javascript,export default { env: {}, argv: [], platform: 'electron', version: '20.0.0', versions: { node: '20.0.0', electron: '20.0.0' }, nextTick: function(cb) { setTimeout(cb, 0); }, cwd: function() { return '/'; }, stdout: { write: function(data) { console.log(data); } }, stderr: { write: function(data) { console.error(data); } } };"
            }
        }
        </script>
    }

    <ImportMap />
    <link rel="icon" type="image/x-icon" href="favicon.ico" />
    <HeadOutlet />
</head>

<body>
    <MudThemeProvider @ref="@_mudThemeProvider" @bind-IsDarkMode="@_isDarkMode" Theme="@FluentishTheme" />
    @if (!RuntimeEnvironment.IsWebAssembly)
    {
        <MudPopoverProvider />
        <MudDialogProvider />
        <MudSnackbarProvider />
    }

    <div id="app">
        <Routes />
    </div>
    <script src="_framework/blazor.web.js"></script>
    <script src="_content/MudBlazor/MudBlazor.min.js"></script>
</body>

</html>

@using LogAnalytics.Shared.Services
@using MudBlazor
@inject IRuntimeEnvironment RuntimeEnvironment

@code {
    private MudThemeProvider? _mudThemeProvider;
    private bool _isDarkMode;

    MudTheme FluentishTheme = new MudTheme()
    {
        PaletteLight = new PaletteLight()
        {
            Primary = "#0078d4",           // Microsoft Blue
            Background = "#faf9f8",        // Fluent light background
            Surface = "#ffffff",           // Fluent cards
            AppbarBackground = "#f3f2f1",  // Fluent header
            Secondary = "#605e5c",         // Fluent secondary gray
            Tertiary = "#323130"           // Fluent tertiary
        },
        PaletteDark = new PaletteDark()
        {
            Primary = "#0078d4",           // Same blue in dark!
            Background = "#201f1e",        // Fluent dark background
            Surface = "#292827",           // Fluent dark cards
            AppbarBackground = "#323130",  // Fluent dark header
            Secondary = "#8a8886",         // Fluent secondary gray dark
            Tertiary = "#605e5c"           // Fluent tertiary dark
        },
        LayoutProperties = new LayoutProperties()
        {
            DefaultBorderRadius = "4px"    // Fluent-like rounded corners
        }
    };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && _mudThemeProvider is not null)
        {
            _isDarkMode = await _mudThemeProvider.GetSystemPreference();
            StateHasChanged();
        }
    }

    public async Task ToggleTheme()
    {
        _isDarkMode = !_isDarkMode;
        StateHasChanged();
    }
}
