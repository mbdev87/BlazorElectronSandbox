@using MudLogAnalyzer.Client.Services
@using MudBlazor
@inject IThemeService ThemeService

<MudDialog>
    <DialogContent>
        <MudText Typo="Typo.h6" Class="mb-3">Appearance Settings</MudText>

        <MudText Typo="Typo.subtitle2" Class="mb-2">UX Tint (AppBar & Drawer)</MudText>
        <div class="color-grid mb-2">
            @foreach (var tint in ThemeService.AvailableTints)
            {
                <div class="color-item @(IsUxSelected(tint) ? "selected" : "")"
                     @onclick="() => SelectUxTint(tint)"
                     title="@tint.Name">
                    <div class="color-circle" style="background-color: @(tint.Name == "None" ? "transparent" : tint.HexValue); border: @(tint.Name == "None" ? "2px dashed #666" : "2px solid rgba(0,0,0,0.1)");"></div>
                    @if (IsUxSelected(tint))
                    {
                        <MudIcon Icon="@Icons.Material.Filled.Check" Size="Size.Small" Class="check-icon" />
                    }
                </div>
            }
        </div>

        <MudSlider @bind-Value="_uxIntensity" Min="0.0" Max="0.15" Step="0.01" Class="mb-3">
            UX Intensity: @(_uxIntensity.ToString("P0"))
        </MudSlider>

        <MudDivider Class="my-3" />

        <MudText Typo="Typo.subtitle2" Class="mb-2">Content Tint</MudText>
        <div class="color-grid mb-2">
            @foreach (var tint in ThemeService.AvailableTints)
            {
                <div class="color-item @(IsContentSelected(tint) ? "selected" : "")"
                     @onclick="() => SelectContentTint(tint)"
                     title="@tint.Name">
                    <div class="color-circle" style="background-color: @(tint.Name == "None" ? "transparent" : tint.HexValue); border: @(tint.Name == "None" ? "2px dashed #666" : "2px solid rgba(0,0,0,0.1)");"></div>
                    @if (IsContentSelected(tint))
                    {
                        <MudIcon Icon="@Icons.Material.Filled.Check" Size="Size.Small" Class="check-icon" />
                    }
                </div>
            }
        </div>

        <MudSlider @bind-Value="_contentIntensity" Min="0.0" Max="0.15" Step="0.01" Class="mb-2">
            Content Intensity: @(_contentIntensity.ToString("P0"))
        </MudSlider>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="Apply">Apply</MudButton>
    </DialogActions>
</MudDialog>

<style>
    .color-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(24px, 1fr));
        gap: 6px;
        padding: 4px 0;
    }

    .color-item {
        position: relative;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        width: 24px;
        height: 24px;
        border-radius: 50%;
        border: 1px solid transparent;
        transition: all 0.2s ease;
    }

    .color-item:hover {
        transform: scale(1.15);
    }

    .color-item.selected {
        border-color: var(--mud-palette-primary);
        box-shadow: 0 0 0 1px rgba(var(--mud-palette-primary-rgb), 0.3);
    }

    .color-circle {
        width: 20px;
        height: 20px;
        border-radius: 50%;
    }

    .check-icon {
        position: absolute;
        color: white;
        font-size: 14px;
        filter: drop-shadow(0 1px 2px rgba(0, 0, 0, 0.5));
    }
</style>

@code {
    [CascadingParameter]
    private MudBlazor.IMudDialogInstance? MudDialog { get; set; }

    private ColorTint? _uxTint;
    private ColorTint? _contentTint;
    private double _uxIntensity = 0.10;
    private double _contentIntensity = 0.05;

    protected override void OnInitialized()
    {
        var settings = ThemeService.Settings;
        _uxTint = settings.UxTint ?? ThemeService.AvailableTints.First(t => t.Name == "None");
        _contentTint = settings.ContentTint ?? ThemeService.AvailableTints.First(t => t.Name == "None");
        _uxIntensity = settings.UxIntensity;
        _contentIntensity = settings.ContentIntensity;
    }

    private void SelectUxTint(ColorTint tint)
    {
        _uxTint = tint;
    }

    private void SelectContentTint(ColorTint tint)
    {
        _contentTint = tint;
    }

    private bool IsUxSelected(ColorTint tint)
    {
        return _uxTint?.HexValue == tint.HexValue;
    }

    private bool IsContentSelected(ColorTint tint)
    {
        return _contentTint?.HexValue == tint.HexValue;
    }

    private async Task Apply()
    {
        var settings = new ThemeSettings
        {
            UxTint = _uxTint,
            ContentTint = _contentTint,
            UxIntensity = _uxIntensity,
            ContentIntensity = _contentIntensity
        };

        await ThemeService.UpdateSettingsAsync(settings);
        MudDialog?.Close(DialogResult.Ok(true));
    }

    private void Cancel()
    {
        MudDialog?.Close(DialogResult.Cancel());
    }
}
